page: mykpse, -
    module: c

    $include stdio

    $global char mykpse_buf[1024] 
    $global char Paths[10][256], n_Paths
    # - used by web2c
    $list uppercasify, xfopen, xfclose
    $list mykpse_find_file
    # - used by cpascal.h
    $list mykpse_open_file
    $list f_eof, f_eoln, f_readln

#------------------------------------------------------
fncode: mykpse_open_file(const char *fname): FILE *
    s = mykpse_find_file(fname)
    $if s
        return fopen(fname, "r")

    return NULL

fncode: mykpse_find_file(const char *fname): char *
    $include <unistd.h>
    s = strrchr(fname, '/')
    $if access(fname, F_OK) != -1
        $if s
            # fname with a path
            $call add_path, s-fname
        return fname
    $elif s == NULL
        # fname is not a path
        $for i=0:n_Paths
            s = internal_find_file(fname, NULL, Paths[i])
            $if s
                return s
    return NULL

    subcode: add_path(len)
        # $print "mykpse: add_path %d - %s\n", n_Paths, fname
        $if n_Paths < 10
            n = $(len)
            $if n <256
                $(set:s=Paths[n_Paths])
                strncpy($(s), fname, n);
                $(s)[n] = '\0'
                n_Paths++

fncode: internal_find_file(const char *fname, const char *ext, const char *path)
    # $print "internal_find_file: [%s] [%s]\n", fname, path
    n = strlen(fname) + strlen(path) + 2 # path/fname + NUL
    $if ext
        n+= strlen(ext) + 1 # .ext

    $if strlen(fname) + strlen(path) + 2 < 1024
        strcpy(mykpse_buf, path)
        strcat(mykpse_buf, "/")
        strcat(mykpse_buf, fname)
        $if ext
            strcat(mykpse_buf, ".")
            strcat(mykpse_buf, ext)

        $if access(mykpse_buf, F_OK) != -1
            return mykpse_buf
    return NULL

#------------------------------------------------------
fncode: uppercasify(const char *s): char *
    n = strlen(s)
    s2 = malloc(n + 1)
    $for i=0:n
        $include ctype
        s2[i] = toupper(s[i])
    s2[n] = '\0'
    return s2

fncode: xfopen(const char *filename, const char *mode): FILE *
    $include stdio, assert
    assert(filename && mode)
    $local FILE *file
    file = fopen(filename, mode);
    $if file==NULL
        $print "Failed to open file %s, mode=%s\n", filename, mode
    return file

fncode: xfclose(FILE *f, const char *filename)
    assert(f)
    $if fclose(f) == EOF
        $print Failed to close file $filename

#------------------------------------------------------
fncode: f_eof(FILE *file)
    $if ! file
        return true
    $if feof(file)
        return true

    $local int c
    c = getc(file)
    $if c == EOF
        return true

    ungetc(c, file)
    return false

fncode: f_eoln(FILE *file)
    $if feof(file)
        return true

    $local int c
    c = getc(file)
    $if c == EOF
        return true

    ungetc(c, file)
    return c=='\n' || c=='\r'

fncode: f_readln(FILE *file)
    $local int c
    $while 1
        c = getc(file)
        $if c=='\n' || c=='\r' || c==EOF
            break
